stages:
  - build
  - deploy_staging
  - deploy_prod

variables:
  DOCKER_REGISTRY: ${CI_REGISTRY}
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  STAGING_SSH_PRIVATE_KEY: ${STAGING_SSH_PRIVATE_KEY}
  PROD_SSH_PRIVATE_KEY: ${PROD_SSH_PRIVATE_KEY}

#lint:
#  stage: lint
#  image: node:20.11-alpine
#  tags:
#    - node
#  script:
#    - yarn install --immutable
#    - yarn lint
#  only:
#    - main
#    - staging

#test:
#  stage: test
#  image: node:20.11-alpine
#  tags:
#    - node
#  script:
#    - yarn install --immutable
#    - yarn test
#  only:
#    - main
#    - staging

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
    - build
  before_script:
    - ls -la
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - |
      if [ "$CI_COMMIT_BRANCH" == "staging" ]; then
        ls -la
        docker build -t ${IMAGE_NAME}:staging -f Dockerfile.staging .
        docker push ${IMAGE_NAME}:staging
      else
        docker build -t ${IMAGE_NAME}:prod -f Dockerfile .
        docker push ${IMAGE_NAME}:prod
      fi
  only:
    - main
    - staging

deploy_staging:
  stage: deploy_staging
  image: alpine:latest
  tags:
    - docker
    - deploy
  environment:
    name: staging
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | ssh-add -
  script:
    - ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER_HOST "
      mkdir -p /opt/mineria-api-staging &&
      docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY} &&
      docker pull ${IMAGE_NAME}:staging"
    - scp docker-compose.staging.yml $STAGING_SERVER_USER@$STAGING_SERVER_HOST:/opt/mineria-api-staging/
    - |
      ssh -o StrictHostKeyChecking=no $STAGING_SERVER_USER@$STAGING_SERVER_HOST "
      cd /opt/mineria-api-staging &&
      docker network create gitlab-network || true &&
      CI_REGISTRY_IMAGE='${CI_REGISTRY_IMAGE}' \
      STAGING_PORT='${STAGING_PORT}' \
      STAGING_JWT_SECRET='${STAGING_JWT_SECRET}' \
      STAGING_API_URL='${STAGING_API_URL}' \
      STAGING_DB_PORT='${STAGING_DB_PORT}' \
      STAGING_DB_USER='${STAGING_DB_USER}' \
      STAGING_DB_PASSWORD='${STAGING_DB_PASSWORD}' \
      STAGING_DB_NAME='${STAGING_DB_NAME}' \
      ENV=staging NODE_ENV=staging TAG=staging docker-compose -f docker-compose.staging.yml up -d"
  only:
    - staging

deploy_prod:
  stage: deploy_prod
  image: alpine:latest
  tags:
    - docker
    - deploy
  environment:
    name: production
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PROD_SSH_PRIVATE_KEY" | ssh-add -
  script:
    - ssh -o StrictHostKeyChecking=no $PROD_SERVER_USER@$PROD_SERVER_HOST "
      mkdir -p /opt/mineria-api &&
      docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY} &&
      docker pull ${IMAGE_NAME}:prod"
    - scp docker-compose.prod.yml $PROD_SERVER_USER@$PROD_SERVER_HOST:/opt/mineria-api/
    - |
      ssh -o StrictHostKeyChecking=no $PROD_SERVER_USER@$PROD_SERVER_HOST "
      cd /opt/mineria-api &&
      docker network create gitlab-network || true &&
      CI_REGISTRY_IMAGE='${CI_REGISTRY_IMAGE}' \
      PROD_PORT='${PROD_PORT}' \
      PROD_JWT_SECRET='${PROD_JWT_SECRET}' \
      PROD_API_URL='${PROD_API_URL}' \
      PROD_DB_PORT='5436' \
      PROD_DB_USER='${PROD_DB_USER}' \
      PROD_DB_PASSWORD='${PROD_DB_PASSWORD}' \
      PROD_DB_NAME='${PROD_DB_NAME}' \
      DATABASE_URL='postgresql://${PROD_DB_USER}:${PROD_DB_PASSWORD}@db:5432/${PROD_DB_NAME}' \
      ENV=production NODE_ENV=production TAG=prod docker-compose -f docker-compose.prod.yml up -d"
  only:
    - main